#include"color_enhance.h"

#include <iostream>
#include <fstream>
#include <math.h>

using namespace std;


static unsigned char g_GammaTable_U[256];//全局数组：包含256个元素的gamma校正查找表
static unsigned char g_GammaTable_V[256];//全局数组：包含256个元素的gamma校正查找表

static unsigned char g_GammaLumaLowTable[256];//全局数组：包含256个元素的gamma校正查找表
static unsigned char g_GammaLumaNormTable[256];//全局数组：包含256个元素的gamma校正查找表
static unsigned char g_GammaLumaHighTable[256];//全局数组：包含256个元素的gamma校正查找表

static unsigned char g_redTable[256][256];
static unsigned char g_greenTable[256][256];
static unsigned char g_blueTable[256][256];
static unsigned char g_yellowTable[256][256];

static unsigned char g_faceTable[256][256];
static unsigned char g_hairTable[256][256];
static unsigned char g_whiteTable[256][256];
static bool bFirst = true;

bool belong2Circle(int x, int y, int r, int input_x, int input_y)
{
	bool ret = false;
	(pow(float(input_x - x), 2) + pow(float(input_y - y), 2)) <= pow((float)r, 2) ? ret = true : ret = false;
	return ret;
}

void buildCircleTable()
{

	//yellow
	for (int x = 0; x < 256; x++)
	for (int y = 0; y < 256; y++)
	{
		if (belong2Circle(60, 155, 15, x, y))
			g_yellowTable[x][y] = 1;
		else
			g_yellowTable[x][y] = 0;
	}
	//red
	for (int x = 0; x < 256; x++)
	for (int y = 0; y < 256; y++)
	{
		if (belong2Circle(120, 165, 15, x, y))
			g_redTable[x][y] = 1;
		else
			g_redTable[x][y] = 0;
	}
	//green
	for (int x = 0; x < 256; x++)
	for (int y = 0; y < 256; y++)
	{
		if (belong2Circle(99, 92, 15, x, y))
			g_greenTable[x][y] = 1;
		else
			g_greenTable[x][y] = 0;
	}
	//blue
	for (int x = 0; x < 256; x++)
	for (int y = 0; y < 256; y++)
	{
		if (belong2Circle(150, 112, 15, x, y))
			g_blueTable[x][y] = 1;
		else
			g_blueTable[x][y] = 0;
	}
	//white
	for (int x = 0; x < 256; x++)
	for (int y = 0; y < 256; y++)
	{
		if (belong2Circle(132, 125, 10, x, y))
			g_whiteTable[x][y] = 1;
		else
			g_whiteTable[x][y] = 0;
	}
	//hair
	for (int x = 0; x < 256; x++)
	for (int y = 0; y < 256; y++)
	{
		if (belong2Circle(115, 120, 10, x, y))
			g_hairTable[x][y] = 1;
		else
			g_hairTable[x][y] = 0;
	}
	//face
	for (int x = 0; x < 256; x++)
	for (int y = 0; y < 256; y++)
	{
		if (belong2Circle(105, 150, 20, x, y))
			g_faceTable[x][y] = 1;
		else
			g_faceTable[x][y] = 0;
	}
}


void BuildTable(float fPrecompensation, int number = 0)
{
	int i;
	float f;
	switch (number)
	{
	case 0:
		for (i = 0; i<256; i++)
		{
			f = (i + 0.5F) / 256;//归一化
			f = (float)pow(f, fPrecompensation);
			g_GammaTable_U[i] = (unsigned char)(f * 256 - 0.5F);//反归一化
		}
		break;
	case 1:
		for (i = 0; i<256; i++)
		{
			f = (i + 0.5F) / 256;//归一化
			f = (float)pow(f, fPrecompensation);
			g_GammaLumaLowTable[i] = (unsigned char)(f * 256 - 0.5F);//反归一化
		}
		break;
	case 2:
		for (i = 0; i<256; i++)
		{
			f = (i + 0.5F) / 256;//归一化
			f = (float)pow(f, fPrecompensation);
			g_GammaLumaNormTable[i] = (unsigned char)(f * 256 - 0.5F);//反归一化
		}
		break;
	case 3:
		for (i = 0; i<256; i++)
		{
			f = (i + 0.5F) / 256;//归一化
			f = (float)pow(f, fPrecompensation);
			g_GammaLumaHighTable[i] = (unsigned char)(f * 256 - 0.5F);//反归一化
		}
		break;
	case 4:
		for (i = 0; i<256; i++)
		{
			f = (i + 0.5F) / 256;//归一化
			f = (float)pow(f, fPrecompensation);
			g_GammaTable_V[i] = (unsigned char)(f * 256 - 0.5F);//反归一化
		}
		break;
	}

}

void GammaCorrectiom(const unsigned char *src, int len, unsigned char *Dst, int num = 0)
{
	int iCols;
	//BuildTable(1 / fGamma);//gamma校正查找表初始化
	//对图像的每个像素进行查找表矫正
	if (num == 0)//U
	{
		for (iCols = 0; iCols<len; iCols++)
		{
			Dst[iCols] = g_GammaTable_U[src[iCols]];
		}
	}
	else//V
	{
		for (iCols = 0; iCols<len; iCols++)
		{
			Dst[iCols] = g_GammaTable_V[src[iCols]];
		}
	}
	

}
void LumaGammaCorrectiom(const unsigned char *src, int len, unsigned char *Dst)
{

	//对图像的每个像素进行查找表矫正
	for (int i = 0; i<len; i++)
	{
		if (src[i] <= 80 && src[i] >= 0)
		{
			Dst[i] = g_GammaLumaLowTable[src[i]];
		}
		else if (src[i] > 80 && src[i] <= 170)
		{
			Dst[i] = g_GammaLumaNormTable[src[i]];

		}
		else
		{
			g_GammaLumaHighTable[src[i]] > 255 ? Dst[i] = 255: Dst[i] = g_GammaLumaHighTable[src[i]];
		}
	}

}

int color_enhance(const unsigned char* pYuvSrc, int ywidth, int yheight, unsigned char *&pYuvDst)
{
	if (pYuvSrc == NULL)
	return IN_ERROR;
	if (ywidth <= 0 || ywidth <= 0)
	return INP_ERROR;
	if (pYuvDst == NULL)
	return OUT_ERROR;

	int len = (ywidth * yheight);
	memcpy(pYuvDst, pYuvSrc, ywidth * yheight * 3 / 2 * sizeof(unsigned char));

	if (bFirst)
	{
		buildCircleTable();
		BuildTable(1.0 / 0.92, 0);//gamma校正查找表初始化
		BuildTable(1.0 / 1.08, 4);//gamma校正查找表初始化

		BuildTable(1.0 / 1.05, 1);//gamma校正查找表初始化
		BuildTable(1.0 / 0.92, 3);//gamma校正查找表初始化
		BuildTable(1.0 / 0.99, 2);//gamma校正查找表初始化
		bFirst = false;
	}
	const unsigned char* pYSrc = pYuvSrc;
	const unsigned char* pUSrc = pYuvSrc + ywidth * yheight;
	const unsigned char* pVSrc = pYuvSrc + ywidth * yheight + (ywidth * yheight) / 4;

	unsigned char* pYDst = pYuvDst;
	unsigned char* pUDst = pYuvDst + ywidth * yheight;
	unsigned char* pVDst = pYuvDst + ywidth * yheight + (ywidth * yheight) / 4;

	LumaGammaCorrectiom(pYSrc, ywidth * yheight, pYDst);
	//GammaCorrectiom(pUSrc, ywidth * yheight / 4, pUDst , 0);
	GammaCorrectiom(pVDst, ywidth * yheight / 4, pVDst , 1);


	for (int i = 0; i < ((ywidth * yheight + 1) / 4); i++)
	{
		//yellow
		if (g_yellowTable[pUSrc[i]][pVSrc[i]] == 1)
		{
			pUDst[i] -= 15;
			pVDst[i] += 10;
			continue;
		}
		//red
		if (g_redTable[pUSrc[i]][pVSrc[i]] == 1)
		{
			pUDst[i] -= 8;
			pVDst[i] += 15;
			continue;

		}
		//green
		if (g_greenTable[pUSrc[i]][pVSrc[i]] == 1)
		{
			pUDst[i] -= 8;
			pVDst[i] -= 15;
			continue;

		}
		//blue
		if (g_blueTable[pUSrc[i]][pVSrc[i]] == 1)
		{
			pUDst[i] -= 2;
			pVDst[i] -= 2;
			continue;

		}
		//hair
		if (g_hairTable[pUSrc[i]][pVSrc[i]] == 1)
		{
			pUDst[i] -= 2;
			pVDst[i] -= 2;
			continue;

		}
		//face
		if (g_faceTable[pUSrc[i]][pVSrc[i]] == 1)
		{
			pUDst[i] += 3;
			pVDst[i] -= 6;
			continue;

		}
		//white
		if (g_whiteTable[pUSrc[i]][pVSrc[i]] == 1)
		{
			pUDst[i] += 2;
			pVDst[i] -= 2;
			continue;

		}

	}

	return CE_SUCCESS;
}